// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// ðŸš¨ FIXED: Use environment variables instead of hardcoded values
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://wzfpltamwhkncxjvulik.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind6ZnBsdGFtd2hrbmN4anZ1bGlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ0NDI5NTksImV4cCI6MjA3MDAxODk1OX0.4m707IwEkfrE-HIJFoP8hUz6VckZTTc_3CgH44f68Hk";

// Debug logging for environment variables
console.log('ðŸ”§ Supabase Client Configuration:');
console.log('URL:', SUPABASE_URL);
console.log('Key (first 20 chars):', SUPABASE_PUBLISHABLE_KEY.substring(0, 20) + '...');
console.log('Full Key:', SUPABASE_PUBLISHABLE_KEY);
console.log('Environment variables available:', {
  VITE_SUPABASE_URL: import.meta.env.VITE_SUPABASE_URL,
  VITE_SUPABASE_ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY ? 'Present' : 'Missing'
});

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Test API key validity
supabase.auth.getSession().then(({ data, error }) => {
  if (error) {
    console.error('ðŸš¨ Supabase Auth Error:', error);
    console.error('This usually means the API key is invalid or expired');
  } else {
    console.log('âœ… Supabase connection successful');
  }
}).catch(err => {
  console.error('ðŸš¨ Supabase Connection Failed:', err);
});